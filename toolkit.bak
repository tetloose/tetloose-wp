#!/bin/bash

#COMMANDS
# ./toolkit setup
# ./toolkit composer-update
# ./toolkit composer
# ./toolkit backup
# ./toolkit merge-branch
# ./toolkit git-commit
# ./toolkit uploads-push
# ./toolkit uploads-pull
# ./toolkit db-push
# ./toolkit db-pull
# ./toolkit deploy

# VARIABLES
# Folders
LIVE_DIR="~/fractures-live"
STAGING_DIR="~/fractures-live"
LOCAL_DIR="~/Sites/Clients/Fractures/Fractures.co.uk"
DROPBOX_DIR="~/Dropbox/Backups/Fractures"

# Uploads directory
UPLOADS_DIR="web/app/uploads"

# SSH (ssh config)
LIVE_SSH="fractures.co.uk"
STAGING_SSH="fractures.co.uk"

# WP Search Replace
LIVE_URL="https://fractures.co.uk"
STAGIN_URL="https://fractures.co.uk"
LOCAL_URL="http://fractures.test"


#START TOOL KIT
clear
echo "Starting theme toolkit..."
git config --global core.pager cat
branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')


# ./toolkit setup
# install npm packages
# install composer packages
# runs gulp & opens browser window with local version
if [ "$1" = "setup" ]; then
  read -p "Please update variables in .env before starting this process [ENTER], [ctrl+c] to cancel: "
  read -p "Update npm and install packages [ENTER]: "
  npm update && npm install
  read -p "Install composer requirments [ENTER]: "
  composer install
  python -m webbrowser -t "http:$LOCAL_URL"
  gulp

# ./toolkit composer-update
elif [ "$1" = "composer-update" ]; then
  composer update

# ./toolkit backup
# Backup live or staging
elif [ "$1" = "backup" ]; then
  echo "live"
  echo "staging"
  read -p "What enviroment do you want to backup? " backupEnv
  read -p "Are you sure your want backup "$backupEnv": [Y/N] " backupEnvConfirm
  if [ "$backupEnvConfirm" = "Y" ]; then
    if [ "$backupEnv" = "live" ]; then
      ssh "$LIVE_SSH" "cd $LIVE_DIR; wp db export backup.sql; zip -r backup.zip .env backup.sql web/.htaccess web/app/uploads";
      eval rsync "$LIVE_SSH":"$LIVE_DIR"/backup.zip "$LOCAL_DIR" --stats --progress -zvrt --update
      eval mv "$LOCAL_DIR"/backup.zip "$DROPBOX_DIR"/backup-env-"$backupEnv"-date-$(date +"%Y-%m-%d").zip
      ssh "$LIVE_SSH" "cd $LIVE_DIR; rm -rf backup.zip backup.sql";
      echo "Backup of $backupEnv created $(date +"%Y-%m-%d") moved to $DROPBOX_DIR";
    elif [ "$backupEnv" = "staging" ]; then
      ssh "$STAGING_SSH" "cd $STAGING_DIR; wp db export backup.sql; zip -r backup.zip .env backup.sql web/.htaccess web/app/uploads";
      eval rsync "$STAGING_SSH":"$STAGING_DIR"/backup.zip "$LOCAL_DIR" --stats --progress -zvrt --update
      eval mv "$LOCAL_DIR"/backup.zip "$DROPBOX_DIR"/backup-env-"$backupEnv"-date-$(date +"%Y-%m-%d").zip
      ssh "$STAGING_SSH" "cd $STAGING_DIR; rm -rf backup.zip backup.sql";
      echo "Backup of $backupEnv created $(date +"%Y-%m-%d") moved to $DROPBOX_DIR";
    else
      echo "$backupEnv not found"
      echo "Canceling..";
    fi
  else
    echo "Canceling..";
  fi

# ./toolkit composer
# Run from command line on server
# only installs composer
elif [ "$1" = "composer" ]; then
  read -p "Please update variables in .env before starting this process [ENTER], [ctrl+c] to cancel: "
  read -p "Install composer requirments [ENTER]: "
  composer install
  echo "Compiled..";


# ./toolkit merge-branch
# merge current branch into another
elif [ "$1" = "merge-branch" ]; then
  git config --global core.pager cat
  branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
  git branch -a
  read -p "Merge Current branch: "$branch" with: [enter] " merge
  if [ -z "${merge}" ]; then
    echo -e "Error! did you forget to copy and paste a branch from the above list?"
    sleep 3
  else
    read -p "Are you sure your want to merge "$branch" with "$merge": [Y/N] " mergeConfirm
    if [ "$mergeConfirm" = "Y" ]; then
      git pull origin "$merge" && \
      git status;
      read -p "Enter commit message [ENTER]: " mergeMessage
      git commit -m "$mergeMessage" && \
      git push;
    else
      echo "Canceling..";
    fi
  fi


# ./toolkit git-commit
# commit to git current branch
elif [ "$1" = "git-commit" ]; then
  echo "Current branch: "$branch""
  git status;
  read -p "Enter a commit message [ENTER]: " desc
  git add --a;
  git commit -m "$desc" && \
  git push;
  git status;


# ./toolkit uploads-push
# Push local uploads to an enviroment
elif [ "$1" = "uploads-push" ]; then
  echo "live"
  echo "staging"
  read -p "What enviroment do you want to push to? " uploadPushEnv
  read -p "Are you sure your want push local uploads to "$uploadPushEnv", this will override uploads on "$uploadPushEnv": [Y/N] " uploadPushEnvConfirm
  if [ "$uploadPushEnvConfirm" = "Y" ]; then
    if [ "$uploadPushEnv" = "live" ]; then
      eval "cd $LOCAL_DIR/web/app; zip -r -D uploads.zip uploads";
      eval rsync "$LOCAL_DIR"/web/app/uploads.zip "$LIVE_SSH":"$LIVE_DIR"/web/app --stats --progress -zvrt --update
      ssh "$LIVE_SSH" "cd $LIVE_DIR/web/app; unzip -o uploads.zip";
      eval "rm -rf $LOCAL_DIR/web/app/uploads.zip";
      ssh "$LIVE_SSH" "rm -rf $LIVE_DIR/web/app/uploads.zip";
      echo "Uploads pushed from Local to $uploadPushEnv";
    elif [ "$uploadPushEnv" = "staging" ]; then
      eval "cd $LOCAL_DIR/web/app; zip -r -D uploads.zip uploads";
      eval rsync "$LOCAL_DIR"/web/app/uploads.zip "$STAGING_SSH":"$STAGING_DIR"/web/app --stats --progress -zvrt --update
      ssh "$STAGING_SSH" "cd $STAGING_DIR/web/app; unzip -o uploads.zip";
      eval "rm -rf $LOCAL_DIR/web/app/uploads.zip";
      ssh "$STAGING_SSH" "rm -rf $STAGING_DIR/web/app/uploads.zip";
      echo "Uploads pushed from Local to $uploadPushEnv";
    else
      echo "$uploadPushEnv not found"
      echo "Canceling..";
    fi
  else
    echo "Canceling..";
  fi

# ./toolkit uploads-pull
# Pull uploads from enviroment to local
elif [ "$1" = "uploads-pull" ]; then
  echo "live"
  echo "staging"
  read -p "What enviroment do you want to pull from? " uploadPullEnv
  read -p "Are you sure your want pull uploads from "$uploadPullEnv" to local, this will override uploads on local: [Y/N] " uploadPullEnvConfirm
  if [ "$uploadPullEnvConfirm" = "Y" ]; then
    if [ "$uploadPullEnv" = "live" ]; then
      ssh "$LIVE_SSH" "cd $LIVE_DIR/web/app; zip -r -D uploads.zip uploads";
      eval rsync "$LIVE_SSH":"$LIVE_DIR"/web/app/uploads.zip "$LOCAL_DIR"/web/app --stats --progress -zvrt --update
      ssh "$LIVE_SSH" "rm -rf $LIVE_DIR/web/app/uploads.zip";
      eval "cd $LOCAL_DIR/web/app"; unzip -o uploads.zip
      eval rm -rf "$LOCAL_DIR"/web/app/uploads.zip
      echo "Uploads pulled from $uploadPullEnv to local..";
    elif [ "$uploadPullEnv" = "staging" ]; then
      ssh "$STAGING_SSH" "cd $STAGING_DIR/web/app; zip -r -D uploads.zip uploads";
      eval rsync "$STAGING_SSH":"$STAGING_DIR"/web/app/uploads.zip "$LOCAL_DIR"/web/app --stats --progress -zvrt --update
      ssh "$STAGING_SSH" "rm -rf $STAGING_DIR/web/app/uploads.zip";
      eval "cd $LOCAL_DIR/web/app"; unzip -o uploads.zip
      eval rm -rf "$LOCAL_DIR"/web/app/uploads.zip
      echo "Uploads pulled from $uploadPullEnv to local..";
    else
      echo "$uploadPullEnv not found"
      echo "Canceling..";
    fi
  else
    echo "Canceling..";
  fi

# ./toolkit db-push
# Push local db to enviroment
# Search Replace urls
elif [ "$1" = "db-push" ]; then
  echo "live"
  echo "staging"
  read -p "What enviroment do you want to push the db to? " dbPushEnv
  read -p "You are about to override the db on "$dbPushEnv" with db from local: [Y/N] " dbPushEnvConfirm
  if [ "$dbPushEnvConfirm" = "Y" ]; then
    eval wp db export localdb.sql
    if [ "$dbPushEnv" = "live" ]; then
      eval rsync -r "$LOCAL_DIR"/localdb.sql "$LIVE_SSH":"$LIVE_DIR" --stats --progress -raz --update
      ssh "$LIVE_SSH" "cd $LIVE_DIR; wp db import localdb.sql; wp search-replace $LOCAL_URL $LIVE_URL; rm -rf localdb.sql"
      rm -rf localdb.sql
      echo "db updated on $dbPushEnv from local..";
    elif [ "$dbPushEnv" = "staging" ]; then
      eval rsync -r "$LOCAL_DIR"/localdb.sql "$STAGING_SSH":"$STAGING_DIR" --stats --progress -raz --update
      ssh "$STAGING_SSH" "cd $STAGING_DIR; wp db import localdb.sql; wp search-replace $LOCAL_URL $STAGIN_URL; rm -rf localdb.sql"
      rm -rf localdb.sql
      echo "db updated on $dbPushEnv from local..";
    else
      echo "$dbPushEnv not found"
      echo "Canceling..";
    fi
  else
    echo "Canceling..";
  fi


# ./toolkit db-pull
# Push local db to enviroment
# Search Replace urls
elif [ "$1" = "db-pull" ]; then
  echo "live"
  echo "staging"
  read -p "What enviroment do you want to pull the db from? " dbPullEnv
  read -p "You are about to override the db on Local with the db from "$dbPullEnv": [Y/N] " dbPullEnvConfirm
  if [ "$dbPullEnvConfirm" = "Y" ]; then
    if [ "$dbPullEnv" = "live" ]; then
      ssh "$LIVE_SSH" "cd $LIVE_DIR; wp db export sitedb.sql";
      eval rsync -r "$LIVE_SSH":"$LIVE_DIR"/sitedb.sql "$LOCAL_DIR" --stats --progress -raz --update;
      eval "wp db import sitedb.sql";
      wp search-replace "$LIVE_URL" "$LOCAL_URL";
      rm -rf sitedb.sql;
      ssh "$LIVE_SSH" "cd $LIVE_DIR; rm -rf sitedb.sql";
      echo "db updated on local from $dbPullEnv...";
    elif [ "$dbPullEnv" = "staging" ]; then
      ssh "$STAGING_SSH" "cd $STAGING_DIR; wp db export sitedb.sql";
      eval rsync -r "$STAGING_SSH":"$STAGING_DIR"/sitedb.sql "$LOCAL_DIR" --stats --progress -raz --update;
      eval "wp db import sitedb.sql";
      wp search-replace "$STAGING_URL" "$LOCAL_URL";
      rm -rf sitedb.sql;
      ssh "$STAGING_SSH" "cd $STAGING_DIR; rm -rf sitedb.sql";
      echo "db updated on local from $dbPullEnv...";
    else
      echo "$dbPullEnv not found"
      rm -rf sitedb.sql
      echo "Canceling..";
    fi
  else
    rm -rf sitedb.sql
    echo "Canceling..";
  fi


# ./toolkit deploy
# Master Branch is live
# Staging Branch is staging
# Deploy to enviroment
elif [ "$1" = "deploy" ]; then
  echo "live";
  echo "staging";
  read -p "Which enviroment do you want to deploy too? " deployEnv;
  read -p "You are about to deploy code to "$deployEnv": [Y/N] " deployEnvConfirm;
  if [ "$deployEnvConfirm" = "Y" ]; then
    if [ "$deployEnv" = "live" ]; then
      ssh "$LIVE_SSH" "cd $LIVE_DIR; git pull; git fetch origin; git reset --hard origin/main; git pull; /usr/bin/php7.1-cli composer.phar update";
      echo "$deployEnv updated...";
    elif [ "$deployEnv" = "staging" ]; then
      ssh "$STAGING_SSH" "cd $STAGING_DIR; git pull; git fetch origin; git reset --hard origin/main; git pull; /usr/bin/php7.1-cli composer.phar update";
      echo "$deployEnv updated...";
    else
      echo "$deployEnv not found";
      echo "Canceling..";
    fi
  else
    echo "Canceling..";
  fi
else
  echo "Stop saying that Withnail, of course he's the fucking farmer!"
fi
